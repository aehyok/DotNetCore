
@{
    ViewData["Title"] = "Index";
    var type = ViewBag.Type as string;

        Layout = "~/Views/Shared/_MainLayout.cshtml";
}
<div>
    <section class="panel">
        <header class="panel-heading tab-bg-dark-navy-blue">
            <ul class="nav nav-tabs">
                <li class="active">
                    <a data-toggle="tab" href="#BlogList">
                        <i class="icon-home"></i>
                        博客列表
                    </a>
                </li>
                <li>
                    <a data-toggle="tab" href="#BlogDetail">
                        <i class="icon-user"></i>
                        博客预览
                    </a>
                </li>
                <li class="">
                    <a data-toggle="tab" href="#contact-2">
                        <i class="icon-envelope"></i>
                        博客设置
                    </a>
                </li>
            </ul>
        </header>
        <div class="panel-body">
            <div class="tab-content">
                <div id="BlogList" class="tab-pane active">
                    <div class="row">
                        <div class="col-lg-12">
                            <section class="panel">
                                <header class="panel-heading">
                                    <button type="button" class="btn btn-info">添加博客</button>
                                </header>
                                <div class="adv-table">
                                    <table class="table table-striped table-advance table-bordered">
                                        <thead>
                                            <tr>
                                                <th><i></i> No</th>
                                                <th><i class="icon-question-sign"></i>Title</th>
                                                <th><i class="icon-bookmark"></i> PostTime</th>
                                                <th><i class=" icon-edit"></i> UpdateTime</th>
                                                <th>Count</th>
                                                <th>操作</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr v-for="(Article,index) in ArticleList">
                                                <td >{{index+1}}</td>
                                                <td><a href="#">{{Article.title}}</a></td>
                                                <td>{{Article.postTime}}</td>
                                                <td>{{Article.updateTime}}</td>
                                                <td>{{Article.count}}</td>
                                                <td>
                                                    <button class="btn btn-primary btn-xs" v-on:click="editBlog(index,Article)"><i class="icon-pencil"></i></button>
                                                    <button class="btn btn-danger btn-xs"  v-on:click="deleteBlog(index,Article)"><i class="icon-trash "></i></button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                @*总记录数<span data-bind="text:RecordCount"></span>&nbsp;&nbsp;&nbsp;每页显示记录数<span data-bind="text:pageSize"></span>
                                <section class="panel">
                                    <ul class=" pagination" style="float: left;">
                                        <li data-bind="css: { disabled: pageIndex() === 1 }"><a href="#" data-bind="click: previousPage">Previous</a></li>
                                    </ul>
                                    <ul class=" pagination" style="float:left; " data-bind="foreach: allPages">
                                        <li data-bind="css: { active: $data.pageNumber === ($root.pageIndex()) }">
                                            <a href="#" data-bind="text: $data.pageNumber, click: function() { $root.moveToPage($data.pageNumber); }"></a>
                                        </li>
                                    </ul>
                                    <ul class=" pagination" style="float: left;">
                                        <li data-bind="css: { disabled: pageIndex() === maxPageIndex() }"><a href="#" data-bind="click: nextPage">Next</a></li>
                                    </ul>
                                </section>*@
                                @Html.Partial("PagePartialView")
                            </section>
                        </div>
                    </div>
                </div>
                <div id="BlogDetail" class="tab-pane">
                    <h2><span data-bind="text:Title"></span></h2>
                    <br />
                    <span data-bind="text: PostTime"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span data-bind="text: UpdateTime"></span>
                    <span data-bind="html:Content"></span>
                </div>
                <div id="contact-2" class="tab-pane ">Set</div>
            </div>
        </div>
    </section>
</div>

<div style="height: 55px;"></div>
<script type="text/javascript">
    function ChangeDateFormat(jsondate) {
        if (jsondate === "") { return ""; }
        jsondate = jsondate.replace("/Date(", "").replace(")/", "");
        if (jsondate.indexOf("+") > 0) {
            jsondate = jsondate.substring(0, jsondate.indexOf("+"));
        }
        else if (jsondate.indexOf("-") > 0) {
            jsondate = jsondate.substring(0, jsondate.indexOf("-"));
        }
        var date = new Date(parseInt(jsondate, 10));
        var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
        var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
        var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
        var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
        var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
        return date.getFullYear()
            + "年"
            + month
            + "月"
            + currentDate
            + "日"
            + " "
            + hours
            + ":"
            + minutes
            + ":"
            + seconds;
    }
</script>
<script>
    //只能输入正整数过滤器
    Vue.filter('onlyNumeric', {
        // model -> view
        // 在更新 `<input>` 元素之前格式化值
        read: function (val) {
            return val;
        },
        // view -> model
        // 在写回数据之前格式化值
        write: function (val, oldVal) {
            //var number = +val.replace(/[^\d]/g, '')
            //return isNaN(number) ? 1 : parseFloat(number.toFixed(2))
            return val;
        }
    })

    //数组删除某项功能
    Array.prototype.remove = function (dx) {
        if (isNaN(dx) || dx > this.length) { return false; }
        for (var i = 0, n = 0; i < this.length; i++) {
            if (this[i] != this[dx]) {
                this[n++] = this[i]
            }
        }
        this.length -= 1
    }

    //http://www.jianshu.com/p/addd2bab739f?from=timeline 样例
    Vue.prototype.$http = axios;
    var url = "http://localhost:5001" +"/api/Blog/";
    var selectUrl =url +"Article/";
    var deleteUrl = url+"Article/";
    var vue=new Vue({
        el: "#BlogList",
        data: {  
            ArticleList: [],//空的初始化数据

            //总项目数
            totalCount: 200,
            //分页数
            pageCount: 20,
            //当前页面
            pageCurrent: 1,
            //分页大小
            pageSize: 8,
            //显示分页按钮数
            showPages: 11,
            //开始显示的分页按钮
            showPagesStart: 1,
            //结束显示的分页按钮
            showPageEnd: 100,
            newTodo: { id: null, Name: '', Task: false }//新建默认数据
        },
        mounted() {
            console.log("mounted");
            //this.getArticleData(url, '1','3');//通过this.getData的URL取得API数据
            this.showPage(1, null, true);
        },
        computed: {
            remaining: function () {
                return this.totalCount;
            }
        },//这里我们声明了一个计算属性 remaining,通过返回this.num的值做为未完成总数
        methods: {//VUE事件处理器
            getArticleData(url, pageCurrent, pageSize) {
                var tempUrl = selectUrl + pageCurrent + "/" + pageSize;
                debugger;
                this.$http.get(tempUrl).then((response) => {
                    this.ArticleList = response.data.articleList;
                    this.totalCount = response.data.count;
                    this.pageCount = Math.ceil(this.totalCount / this.pageSize);
                    this.showPages = this.pageCount-4;   //要显示的分页数
                });
            },//this.getData取得数据库数据，并取得未完成事件总数

            showPage: function (pageIndex, $event, forceRefresh) {
                console.log('当前页数为' + pageIndex);
                console.log(mgr.getUser().profile.name);
                this.getArticleData(url, pageIndex, this.pageSize);
                if (pageIndex > 0) {


                    if (pageIndex > this.pageCount) {
                        pageIndex = this.pageCount;
                    }

                    //判断数据是否需要更新
                    var currentPageCount = Math.ceil(this.totalCount / this.pageSize);
                    if (currentPageCount != this.pageCount) {
                        pageIndex = 1;
                        this.pageCount = currentPageCount;
                    }
                    else if (this.pageCurrent == pageIndex && currentPageCount == this.pageCount && typeof (forceRefresh) == "undefined") {
                        console.log("not refresh");
                        return;
                    }

                    //处理分页点中样式
                    var buttons = $("#pager").find("span");
                    for (var i = 0; i < buttons.length; i++) {
                        if (buttons.eq(i).html() != pageIndex) {
                            buttons.eq(i).removeClass("active");
                        }
                        else {
                            buttons.eq(i).addClass("active");
                        }
                    }

                    ////测试数据 随机生成的
                    //var newPageInfo = [];
                    //for (var i = 0; i < this.pagesize; i++) {
                    //    newPageInfo[newPageInfo.length] = {
                    //        name: "test" + (i + (pageIndex - 1) * 20),
                    //        age: (i + (pageIndex - 1) * 20)
                    //    };
                    //}
                    this.pageCurrent = pageIndex;
                    //this.arrayData = newPageInfo;

                    //计算分页按钮数据
                    if (this.pageCount > this.showPages) {
                        if (pageIndex <= (this.showPages - 1) / 2) {
                            this.showPagesStart = 1;
                            this.showPageEnd = this.showPages - 1;
                            console.log("showPage1")
                        }
                        else if (pageIndex >= this.pageCount - (this.showPages - 3) / 2) {
                            this.showPagesStart = this.pageCount - this.showPages + 2;
                            this.showPageEnd = this.pageCount;
                            console.log("showPage2")
                        }
                        else {
                            console.log("showPage3")
                            this.showPagesStart = pageIndex - (this.showPages - 3) / 2;
                            this.showPageEnd = pageIndex + (this.showPages - 3) / 2;
                        }
                    }
                    console.log("showPagesStart:" + this.showPagesStart + ",showPageEnd:" + this.showPageEnd + ",pageIndex:" + pageIndex);
                }
            },//分页方法
            editBlog(index, item)
            {
                var url = "../Blog/Add?menuId=BlogAdd&type=header&id=" + item.id;
                window.open(url, "_self", "", false);
                console.log("index" + index );
            },

            deleteBlog(index,item)
            {
                var self = this;
                swal({
                    title: '你确定删除吗？',
                    text: '一旦删除，将无法恢复！',
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#DD6B55',
                    confirmButtonText: '确定删除！',
                    cancelButtonText: '取消操作！',
                    closeOnConfirm: false,
                    closeOnCancel: false
                },
                    function (isConfirm) {
                        if (isConfirm) {
                            swal("删除！", "您的文件已经被删除！", 'success');
                            var tempUrl = deleteUrl + item.id;
                            self.$http.delete(tempUrl).then((response) => {
                                toastr.success("删除成功！");
                                self.getArticleData(url, self.pageCurrent, self.pageSize);
                            });
                        } else {
                            swal('取消！', "您的文件是依然存在！", 'error');
                        }
                    }
                )

                //var tempUrl = deleteUrl + item.id;
                //this.$http.delete(tempUrl).then((response) => {
                //    toastr.success("删除成功！");
                //    this.getArticleData(url, this.pageCurrent, this.pagesize);
                //});
                console.log("index" + index);
            },
            addTodo(newTodo) {
                this.ArticleList.push(newTodo);
                this.totalCount++;
                this.$http.post('/api/todo/PostTodo', newTodo).then(response => console.log(response));
                this.newTodo = { id: null, Name: '', Task: false }
            },//添加任务，并且将数据post到URL

            deleteTodo(index, id) {
                if (!this.ArticleList[index].Task) {
                    this.totalCount--;
                }
                this.$http.delete('/api/todo/DeleteTodo/' + id).then(response => console.log(response));
                this.ArticleList.splice(index, 1);
            },//删除任务，如果删除的任务是未完成的，那么将对未完成总数-1

            toggleTodo(index, id) {
                var thistodo = !this.ArticleList[index].Task;
                var thisdata = {
                    Name: this.ArticleList[index].Name,
                    Task: thistodo
                };
                this.$http.put('/api/todo/puttodo/' + id, thisdata
                ).then(response => console.log(response));
                thistodo ? this.totalCount-- : this.totalCount++;
                this.ArticleList[index].Task = thistodo;
            }
        },//完成任务或者撤销任务
    });
</script>
